{"version":3,"sources":["components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","className","s","statisticsList","statisticItem","FeedbackOptions","options","onLeaveFeedback","optionsList","map","label","feedbackOption","type","button","onClick","Notification","message","App","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","setState","prevState","Object","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mOAgBeA,EAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACJ,oCACJ,6BAAKD,IACJC,M,gBCgBMC,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,qBAAIC,UAAWC,IAAEC,eAAjB,UACI,qBAAIF,UAAWC,IAAEE,cAAjB,kBAAsCR,KACtC,qBAAIK,UAAWC,IAAEE,cAAjB,qBAAyCP,KACzC,qBAAII,UAAWC,IAAEE,cAAjB,iBAAqCN,KACrC,qBAAIG,UAAWC,IAAEE,cAAjB,mBAAuCL,KACvC,qBAAIE,UAAWC,IAAEE,cAAjB,+BAAmDJ,EAAnD,W,gBCSOK,EAfS,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACpB,oBAAIN,UAAWC,IAAEM,YAAjB,SACKF,EAAQG,KAAI,SAAAC,GAAK,OAChB,oBAAIT,UAAWC,IAAES,eAAjB,SAAiC,wBAAQC,KAAK,SAASX,UAAWC,IAAEW,OAAoBC,QACtE,kBAAMP,EAAgBG,IADP,SAEhBA,GAFgEA,WCI5EK,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,6BAAKA,KCGHC,E,4MACJC,MAAQ,CACNtB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPqB,mBAAqB,WACf,OAAO,EAAKD,MAAMpB,IAAM,EAAKoB,MAAMrB,QAAU,EAAKqB,MAAMtB,M,EAG5DwB,gCAAkC,WAC9B,OAAI,EAAKF,MAAMpB,IAAM,EAAKoB,MAAMrB,QAAU,EAAKqB,MAAMtB,OAAS,EACnD,EAEJyB,KAAKC,MAAwB,IAAlB,EAAKJ,MAAMtB,MAAc,EAAKsB,MAAMpB,IAAM,EAAKoB,MAAMrB,QAAU,EAAKqB,MAAMtB,Q,EAGhGW,gBAAkB,SAAAG,GAAK,OACnB,EAAKa,UAAS,SAAAC,GAAS,sBAAQd,EAAQc,EAAUd,GAAS,O,4CAEhE,WACE,OACA,sBAAKT,UAAU,MAAf,UACI,cAAC,EAAD,CAASR,MAAM,wBAAf,SACE,cAAC,EAAD,CACEa,QAASmB,OAAOC,KAAKC,KAAKT,OAC1BX,gBAAiBoB,KAAKpB,oBAG1B,cAAC,EAAD,CAASd,MAAM,aAAf,SACGkC,KAAKR,qBACH,cAAC,EAAD,CACCvB,KAAM+B,KAAKT,MAAMtB,KACjBC,QAAS8B,KAAKT,MAAMrB,QACpBC,IAAK6B,KAAKT,MAAMpB,IAChBC,MAAO4B,KAAKR,qBACZnB,mBAAoB2B,KAAKP,oCAGzB,cAAC,EAAD,CAAcJ,QAAQ,+B,GAxClBY,aAgDHX,IClDfY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,cAAgB,oC,kBCAtFD,EAAOC,QAAU,CAAC,YAAc,qCAAqC,eAAiB,wCAAwC,OAAS,mC","file":"static/js/main.462c4a83.chunk.js","sourcesContent":["\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) =>(\r\n            <section>\r\n        <h2>{title}</h2>\r\n        {children}\r\n            </section>\r\n    \r\n)\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport s from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n    <ul className={s.statisticsList}>\r\n        <li className={s.statisticItem}>Good:{good}</li>\r\n        <li className={s.statisticItem}>Neutral:{neutral}</li>\r\n        <li className={s.statisticItem}>Bad:{bad}</li>\r\n        <li className={s.statisticItem}>Total:{total}</li>\r\n        <li className={s.statisticItem}>Positive feedback:{positivePercentage}%</li>\r\n    </ul>\r\n);\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback,}) => (\r\n    <ul className={s.optionsList}>\r\n        {options.map(label => (\r\n          <li className={s.feedbackOption}><button type=\"button\" className={s.button} key={label} onClick={\r\n                            () => onLeaveFeedback(label)\r\n                        }>{label}</button></li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n    <h2>{message}</h2>\r\n);\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;","import React, { Component } from 'react';\r\n\r\nimport Section from './components/Section/Section';\r\nimport Statistics from './components/Statistics/Statistics';\r\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\r\nimport Notification from './components/Notification/Notification';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  }\r\n\r\n  countTotalFeedback = () => {\r\n        return this.state.bad + this.state.neutral + this.state.good;\r\n    }\r\n\r\n    countPositiveFeedbackPercentage = () => {\r\n        if (this.state.bad + this.state.neutral + this.state.good === 0) {\r\n            return 0;\r\n    }\r\n        return Math.floor(this.state.good * 100 / (this.state.bad + this.state.neutral + this.state.good));\r\n    }\r\n\r\n    onLeaveFeedback = label =>\r\n        this.setState(prevState => ({ [label]: prevState[label] + 1 }));\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={Object.keys(this.state)}\r\n            onLeaveFeedback={this.onLeaveFeedback}>\r\n            </FeedbackOptions>\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback() ?\r\n            (<Statistics\r\n              good={this.state.good}\r\n              neutral={this.state.neutral}\r\n              bad={this.state.bad}\r\n              total={this.countTotalFeedback()}\r\n              positivePercentage={this.countPositiveFeedbackPercentage()}>    \r\n            </Statistics>\r\n            ) : (\r\n              <Notification message=\"No feedback given\" />\r\n            )\r\n          }\r\n        </Section>\r\n    </div>)\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsList\":\"Statistics_statisticsList__3hW5d\",\"statisticItem\":\"Statistics_statisticItem__1_rNZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"optionsList\":\"FeedbackOptions_optionsList__uT3b0\",\"feedbackOption\":\"FeedbackOptions_feedbackOption__2nXRZ\",\"button\":\"FeedbackOptions_button__3Z-pr\"};"],"sourceRoot":""}